This is designed to send files to and from people who are able to communicate with each other over TCP.
The person hosting the TCP listener can be decided at runtime, but only one person in the interaction can host.
Hosting has certain advantages and disadvantages:

When receiving, you can recieve from multiple people easily.
When sending, you can send to multiple people easily.

But:
You cannot initiate the connections.

While there may only be one downside, it contains certain risks.
You must confirm that you are sending or recieving from the right person or be at rist of malware or data theft.
Towards that end, when you are hosting, you must confirm every connection before having it go through.
You must also do this when recieving and not hosting because I am lazy.

Also, and this is important, the data is sent of TCP, not TLS.
For those who don't recognise these, TLS is encrypted, TCP is not.
If you are using something that encrypts your data,
or you encrypt the files you are sending, then that will matter less.


Here are the arguments to this binary:
(Arguments marked with * are implied by default unless something
else overrides them)

    help
        Prints this out
    --recv
        Indicates that you will be recieving a file
    --send
        Indicates that you will be sending a file
        (You must include either --send or --recv)
    --host [port]
        Indicates you will be hosting and want to use the given port
        You must include a port because I am lazy
    --override [format id]
        Indicates a maximum format that you are comfortable using.
        Specifically it will try and get that format to be used,
	however it does not guarantee that it will.
        If the other person is not able to use that format,
	or has overridden an older format,
        then theirs will be used as it is the newest that both parties are willing to use.
*   --no-overide
	Makes it so that you are no longer overriding the
	format, overriding any previous --override arguments
    --path [path]
	SEND ONLY
	Specifies the path to the file you want to send, meaning
	that you will not have the terminal interaction about
	asking which file you want to send.
*   --no-path
	SEND ONLY
	Makes it so that it will once again ask for which file
	you want to send, overriding any previous --path
	arguments.
    --target [addr:port]
	CLIENT ONLY(not the one hosting)
	Specifies what addr:port you want to connect to,
	bypassing the interaction where it asks you.
*   --no-target
	CLIENT ONLY
	Makes it so that you will once again ask you for who you
	want to connect to, overriding any previous --target
	arguments.
    --quiet
	Removes non-necessary printing.
	Notably, it will still print instructions for any
	interactions you need to do, such as specifying a file.
*   --normal
	Makes it so that you will once again get a normal amount
	of printing, overriding any previous --quiet arguments
    --auto-accept
	Makes it so that incoming files are automatically
	accepted, skipping the relevant input prompt
*   --no-auto-accept
	Makes it so that it will once again ask before accepting
	incoming files, overriding any previous --auto-accept
	arguments.
    --repeat
	Makes it so that after going through the loop, it will
	go through it again until you stop the code from running.
	This is most helpful when you are hosting so that you can
	send or recieve multiple times without needing to set up
	the server each time
*   --no-repeat
	Makes it so that it will not repeat after finishing the
	sequence and will instead close automatically
        
Using this you may notice that it closes and must be rerun after
every successful exchange(unless you are hosting)
That is because I am too lazy to properly implement this, and I don't intend to.
